collections.Counter类型

3.1版本引入的新类型，被称为计数器。
显示其中每个元素的数量，每个item都要求是可哈希的。
Counter是dict的子类，具有dict大多数属性和方法。


1）引入
from collections import Counter


2）创建与赋值
创建空的计数器
>>> Counter()
Counter()

通过可迭代对象创建计数器
>>> Counter('gallahad')
Counter({'a': 3, 'l': 2, 'g': 1, 'h': 1, 'd': 1})

通过字典对象创建计数器
>>> Counter({'red': 4, 'blue': 2})
Counter({'red': 4, 'blue': 2})

通过关键字参数创建计数器
>>> Counter(cats=4, dogs=8)
Counter({'dogs': 8, 'cats': 4})


3）取值
返回该元素在集合中出现的次数
>>> c['元素名']

返回c的序列，元素为(key, pairs)对
>>> c.items()

>>> c.keys()
>>> c.values()

返回val为正的内容
Counter({'a': 3, 'b': -3})
>>> +c
Counter({'a': 3})

返回随机顺序的集合内容，忽略val小于1的
>>> c = Counter(a=4, b=2, c=0, d=-2)
>>> c.elements()
['a', 'a', 'b', 'a', 'b', 'a']

c.most_common([n])：从多到少返回某个序列中n个出现最多的元素和它们的出现次数。若n为None或被省略，则返回counter中的所有元素
>>> Counter('abracadabra').most_common(3)
[('a', 5), ('r', 2), ('b', 2)]


4）更新
用于向c中追加记录
c.update(可迭代对象)


5）删除
对计数器中某个元素归0
>>> c['元素名']=0

删除计数器中某个元素
>>> del c['元素名']

清空c中所有元素
>>> c.clear()


6）交并差
c.subtract(可迭代对象b)：用c中每个元素减去b中出现的每个元素，会出现负数
>>> c
Counter({'dogs': 6, 'cats': 4})
>>> c.subtract({'dogs':8, 'monkey':10})
>>> c
Counter({'cats': 4, 'dogs': -2, 'monkey': -10})

支持+、-、&、|操作
>>> c = Counter(a=3, b=1)
>>> d = Counter(a=1, b=2)

>>> c + d：将两个元素相加起来
Counter({'a': 4, 'b': 3})

>>> c - d：相减，不同于c.subtract，只返回val为正的结果
Counter({'a': 2})

>>> c & d：交集，相当于取两个counter中元素的最小值
Counter({'a': 1, 'b': 1})

>>> c | d，并集，相当于取两个counter中元素的最大值
Counter({'a': 3, 'b': 2})


备注：
虽然Counter是dict的子类，但对于底层我觉得可理解成是[a,a,a,b,b]

